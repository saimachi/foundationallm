<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="System.Text.Json" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="System.Memory" #>
<#@ import namespace="System.Text.Json" #>
<#@ import namespace="System.Text.Json.Nodes" #>
<#@ output extension=".cs" #>
<#
    string inputFileName = this.Host.ResolvePath($"../Data/RoleDefinitions.json");
    string inputContent = File.ReadAllText(inputFileName);
    var jsonObjects = JsonNode.Parse(inputContent)!;
#>
using System.Collections.ObjectModel;

namespace FoundationaLLM.Authorization.Models
{
    public static class RoleDefinitions
    {

        public static readonly ReadOnlyDictionary<string, RoleDefinition> All = new (
            new Dictionary<string, RoleDefinition>()
            {
<#
    foreach (var jsonObject in jsonObjects.AsArray())
    {
#>
                {
                    "<#= jsonObject["object_id"] #>",
                    new RoleDefinition
                    {
                        Name = "<#= jsonObject["name"] #>",
                        Type = "<#= jsonObject["type"] #>",
                        ObjectId = "<#= jsonObject["object_id"] #>",
                        DisplayName = "<#= jsonObject["display_name"] #>",
                        Description = "<#= jsonObject["description"] #>",
                        AssignableScopes = [<# foreach (var scope in jsonObject["assignable_scopes"].AsArray()) { #>

                            "<#= scope #>",<# } #>],
                        Permissions = [<# foreach (var permissions in jsonObject["permissions"].AsArray()) { #>
                            
                            new RoleDefinitionPermissions
                            {
                                Actions = [<# foreach (var action in permissions["actions"].AsArray()) { #>

                                    "<#= action #>",<# } #>],
                                NotActions = [<# foreach (var notAction in permissions["not_actions"].AsArray()) { #>

                                    "<#= notAction #>",<# } #>],
                                DataActions = [<# foreach (var dataAction in permissions["data_actions"].AsArray()) { #>

                                    "<#= dataAction #>",<# } #>],
                                NotDataActions = [<# foreach (var notDataAction in permissions["not_data_actions"].AsArray()) { #>

                                    "<#= notDataAction #>",<# } #>],
                            },<# } #>],
                        CreatedOn = DateTimeOffset.Parse("<#= jsonObject["created_on"] #>"),
                        UpdatedOn = DateTimeOffset.Parse("<#= jsonObject["updated_on"] #>"),
                        CreatedBy = <#= jsonObject["created_by"] == null ? "null" : $"\"{jsonObject["created_by"]}\"" #>,
                        UpdatedBy = <#= jsonObject["updated_by"] == null ? "null" : $"\"{jsonObject["updated_by"]}\"" #>
                    }
                },
<#
    }
#>
            });
    }
}
